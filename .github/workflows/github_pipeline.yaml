name: Python CI Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  # build:
  #   runs-on: ubuntu-latest

  #   services:
  #     docker:
  #       image: docker:19.03.12
  #       options: --privileged

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Set up Python
  #       uses: actions/setup-python@v5
  #       with:
  #         python-version: '3.11'

  #     - name: Install uv
  #       uses: astral-sh/setup-uv@v5

  #     - name: Install dependencies
  #       run: uv sync --locked --all-extras --dev

  #     - name: Ruff linting and formatting
  #       uses: astral-sh/ruff-action@v3

  # codeql:
  #   name: CodeQL SAST
  #   runs-on: ubuntu-latest
  #   needs: [build]
  #   permissions:
  #     security-events: write
  #     actions: read
  #     contents: read

  #   strategy:
  #     matrix:
  #       language: [ 'python' ]

  #   steps:
  #   - name: Checkout repository
  #     uses: actions/checkout@v4

  #   - name: Initialize CodeQL
  #     uses: github/codeql-action/init@v3
  #     with:
  #       languages: ${{ matrix.language }}

  #   - name: Autobuild
  #     uses: github/codeql-action/autobuild@v3

  #   - name: Perform CodeQL Analysis
  #     uses: github/codeql-action/analyze@v3

  # gitleaks:
  #   name: Run Gitleaks
  #   runs-on: ubuntu-latest
  #   needs: [build, codeql]
  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0

  #     - name: Scan for Secrets with Gitleaks
  #       uses: gitleaks/gitleaks-action@v2

  # bandit:
  #   name: Run Bandit
  #   runs-on: ubuntu-latest
  #   needs: [build, codeql, gitleaks]
  #   permissions:
  #     # required for all workflows
  #     security-events: write
  #     # only required for workflows in private repositories
  #     actions: read
  #     contents: read
  #   steps:
  #     - name: Perform Bandit Analysis
  #       uses: PyCQA/bandit-action@v1

  dast-test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build Docker image
      run: docker build -t web-app:latest .

    - name: Run Docker container in detached mode
      run: |
        docker run -d --name web-app -p 8000:8000 web-app:latest

    - name: Wait for app to be ready
      run: |
        echo "Waiting for Python app to be ready on http://localhost:8000 ..."
        for i in {1..30}; do
          if curl --silent --fail http://localhost:8000; then
            echo "App is up!"
            exit 0
          else
            echo "Waiting for app..."
            sleep 2
          fi
        done
        echo "App did not start in time"
        exit 1

    - name: Run DAST tests with OWASP ZAP
      uses: zaproxy/action-full-scan@v0.7.0
      with:
        target: 'http://localhost:8000'
        cmd_options: '-quickout report.html -quickprogress'
      # The above action spins up ZAP, runs quick scan, outputs report.html

    - name: Upload DAST report
      uses: actions/upload-artifact@v4
      with:
        name: dast-report
        path: report.html

    - name: Cleanup - Stop and remove container
      run: |
        docker stop web-app
        docker rm web-app

