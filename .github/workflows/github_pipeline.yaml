name: Python CI Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    name: Setup solution
    runs-on: ubuntu-latest
    services:
      docker:
        image: docker:19.03.12
        options: --privileged
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: Install dependencies
        run: uv sync --locked --all-extras --dev

      - name: Ruff linting and formatting
        uses: astral-sh/ruff-action@v3

  tests:
    name: Run unit tests (pytest)
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: Install dependencies
        run: uv sync --locked --all-extras --dev

      - name: Run unit tests with pytest
        run: uv run pytest -v --durations=0 --cov --cov-report=xml

  codeql:
    name: Run SAST Tests (CodeQL) 
    runs-on: ubuntu-latest
    needs: [build, tests]
    permissions:
      security-events: write
      actions: read
      contents: read
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: python

    - name: Autobuild
      uses: github/codeql-action/autobuild@v4

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v4

  gitleaks:
    name: Run Secret Management Tests (Gitleaks)
    runs-on: ubuntu-latest
    needs: [build, codeql, tests]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Scan for Secrets with Gitleaks
        uses: gitleaks/gitleaks-action@v4

  bandit:
    name: Run SAST Tests (Bandit)
    runs-on: ubuntu-latest
    needs: [build, codeql, gitleaks, tests]
    permissions:
      # required for all workflows
      security-events: write
      # only required for workflows in private repositories
      actions: read
      contents: read
    steps:
      - name: Run SAST tests with Bandit
        uses: PyCQA/bandit-action@v1

  dast-test:
    runs-on: ubuntu-latest
    needs: [build, codeql, gitleaks, tests, bandit]
    name: Run DAST tests (OWASP ZAP)
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build Docker image
      run: docker compose build

    - name: Run Docker container in detached mode
      run: |
        docker compose up -d

    - name: Wait for app to be ready
      run: |
        echo "Waiting for Python app to be ready on http://localhost:8000 ..."
        for i in {1..30}; do
          if curl --silent --fail http://localhost:8000; then
            echo "App is up!"
            exit 0
          else
            echo "Waiting for app..."
            sleep 2
          fi
        done
        echo "App did not start in time"
        exit 1

    - name: Run DAST tests with OWASP ZAP
      uses: zaproxy/action-baseline@v0.14.0
      with:
        docker_name: 'ghcr.io/zaproxy/zaproxy:stable'
        target: 'http://localhost:8000'
        allow_issue_writing: false
        cmd_options: '-r report_html.html -a'

    - name: Upload DAST report
      uses: actions/upload-artifact@v4
      with:
        name: zap-report
        path: report_html.html

    - name: Cleanup - Stop and remove container
      run: |
        docker compose down --remove-orphans

