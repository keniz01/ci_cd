name: Python CI Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    name: Setup solution
    runs-on: ubuntu-latest
    services:
      docker:
        image: docker:19.03.12
        options: --privileged
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: Install dependencies
        run: uv sync --locked --all-extras --dev

      - name: Ruff linting and formatting
        uses: astral-sh/ruff-action@v3

  tests_pytest:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: Install dependencies
        run: uv sync --locked --all-extras --dev

      - name: Run unit tests with pytest
        run: uv run pytest -v --durations=0 --cov --cov-report=xml

  sca_safety:
    runs-on: ubuntu-latest
    needs: [build, tests_pytest]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python Environment
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: Install dependencies (from pyproject.toml)
        run: uv sync --all-extras --dev

      - name: Run Safety (SCA)
        run: |
          uv run safety check --full-report --json > safety-report.json || echo "Safety scan completed with issues"

      - name: Upload Safety Report
        uses: actions/upload-artifact@v5
        with:
          name: safety-sca-report
          path: safety-report.json

  secrets_detection_gitleaks:
    name: Run Gitleaks
    runs-on: ubuntu-latest
    needs: [build, sca_safety, tests_pytest]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Scan for Secrets with Gitleaks
        uses: gitleaks/gitleaks-action@v2

  sast_bandit:
    runs-on: ubuntu-latest
    needs: [build, sca_safety, tests_pytest, secrets_detection_gitleaks]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python Environment
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: Install dependencies
        run: uv sync --locked --all-extras --dev

      - name: Run Bandit (SAST)
        run: |
          uv run bandit -r . -ll -iii -f html -o bandit-report.html || echo "Bandit scan completed with issues"

      - name: Upload Bandit Report
        uses: actions/upload-artifact@v5
        with:
          name: bandit-sast-html-report
          path: bandit-report.html

  dast-test:
    runs-on: ubuntu-latest
    needs: [build, sca_safety, tests_pytest, secrets_detection_gitleaks, sast_bandit]
    name: Run OWASP ZAP DAST
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build Docker image
      run: docker compose build

    - name: Run Docker container in detached mode
      run: |
        docker compose up -d

    - name: Wait for app to be ready
      run: |
        echo "Waiting for Python app to be ready on http://localhost:8000 ..."
        for i in {1..30}; do
          if curl --silent --fail http://localhost:8000; then
            echo "App is up!"
            exit 0
          else
            echo "Waiting for app..."
            sleep 2
          fi
        done
        echo "App did not start in time"
        exit 1

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@v0.16.0
      with:
        image-ref: web-app:latest
        format: table
        exit-code: 1
        severity: CRITICAL,HIGH

    - name: Run DAST tests with OWASP ZAP
      uses: zaproxy/action-baseline@v0.14.0
      with:
        docker_name: 'ghcr.io/zaproxy/zaproxy:stable'
        target: 'http://localhost:8000'
        allow_issue_writing: false
        cmd_options: '-r report_html.html -a'

    - name: Upload DAST report
      uses: actions/upload-artifact@v5
      with:
        name: zap-report
        path: report_html.html

    - name: Cleanup - Stop and remove container
      run: |
        docker compose down --remove-orphans

